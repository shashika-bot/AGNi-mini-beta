const { cmd } = require("../command");
const yts = require("yt-search");
const ytdl = require("ytdl-core");
const fs = require("fs");
const path = require("path");
const events = require("events");

// Fix MaxListenersExceededWarning
events.EventEmitter.defaultMaxListeners = 50;

cmd(
  {
    pattern: "song",
    react: "üéµ",
    desc: "Download YouTube Audio",
    category: "download",
    filename: __filename,
  },
  async (bot, mek, m, { from, args, reply }) => {
    try {
      const q = args.join(" ");
      if (!q) return reply("‚ùå ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∂ª‡∑í / YouTube link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± üéµ");

      // 1Ô∏è‚É£ Get YouTube URL
      let url = q;
      try {
        new URL(q); // Valid URL?
      } catch {
        const search = await yts(q);
        if (!search?.videos?.length) return reply("‚ùå ‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫!");
        url = search.videos[0].url;
      }

      // 2Ô∏è‚É£ Get video info
      let info;
      try {
        info = await ytdl.getInfo(url);
      } catch (e) {
        return reply("‚ùå Video unavailable / removed.");
      }

      const details = info.videoDetails;
      const fileName = `${details.title}.mp3`.replace(/[\/\\?%*:|"<>]/g, "_");
      const filePath = path.join(__dirname, fileName);

      // 3Ô∏è‚É£ Send thumbnail + details
      await bot.sendMessage(
        from,
        {
          image: { url: details.thumbnails[0].url },
          caption: `üé∂ *${details.title}*\nüëÄ Views: ${details.viewCount}\n‚è± Duration: ${Math.floor(details.lengthSeconds/60)} min\nüîó ${url}`,
        },
        { quoted: mek }
      );

      // 4Ô∏è‚É£ Download audio
      const stream = ytdl(url, { filter: "audioonly", quality: "highestaudio" });
      const writeStream = fs.createWriteStream(filePath);
      stream.pipe(writeStream);

      stream.on("error", (err) => {
        console.error(err);
        reply("‚ùå Cannot download this video, maybe removed or private.");
      });

      writeStream.on("finish", async () => {
        try {
          // 5Ô∏è‚É£ Send direct audio
          await bot.sendMessage(
            from,
            { audio: fs.createReadStream(filePath), mimetype: "audio/mpeg", fileName: fileName },
            { quoted: mek }
          );

          // 6Ô∏è‚É£ Send as document (optional)
          await bot.sendMessage(
            from,
            { document: fs.createReadStream(filePath), mimetype: "audio/mpeg", fileName: fileName },
            { quoted: mek }
          );

          // 7Ô∏è‚É£ Cleanup
          fs.unlinkSync(filePath);
          reply("‚úÖ ‡∂ú‡∑ì‡∂≠‡∂∫ send ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì!");
        } catch (e) {
          console.error(e);
          reply("‚ùå Failed to send audio/document");
          if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
        }
      });
    } catch (e) {
      console.error(e);
      reply("‚ùå Error: " + e.message);
    }
  }
);
